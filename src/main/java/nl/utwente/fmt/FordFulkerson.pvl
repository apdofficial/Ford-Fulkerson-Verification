class FordFulkerson {

    requires \array(p, V);
    requires (\forall* int i1 ; 0 <= i1 && i1 < V; Perm(p[i1], read));
    pure boolean valid_graph_vertices(int[V] p, int V) = 
        (\forall int i; 0 <= i && i < p.length; 0 <= p[i] && p[i] < V);
    
    pure boolean valid_graph_vertices(seq<int> p, int V) = 
        (\forall int i; 0 <= i && i < |p|; 0 <= p[i] && p[i] < V);

    pure boolean is_bounded(int x, int N) = 0 <= x && x < N;

    pure boolean valid_path(seq<int> P, int V) = 
        (\forall int i; 0 <= i && i < |P|; 0 <= P[i] && P[i] < V);

    pure boolean FlowNetwork(seq<seq<int>> G, int V, int s, int t) = 
        |G| == V && (\forall seq<int> e; e in G; |e| == V);

    requires FlowNetwork(G, V, s, t);
    pure boolean AugPath(seq<seq<int>> G, int V, int s, int t, seq<int> P) =
        0 <= s && s < V && 0 <= t && t < V &&
        0 < |P| && P[0] == s && P[|P| - 1] == t &&
        (\forall int j; 0 <= j && j < |P|; 0 <= P[j] && P[j] < V) &&
        (\forall int j; 0 <= j && j < |P| - 1; G[P[j]][P[j + 1]] > 0);

    requires FlowNetwork(G, V, s, t);
    pure boolean ExAugPath(seq<seq<int>> G, int V, int s, int t) = 
        (\exists seq<int>  P; Path(G, V, s, t, P); |P| <= V);


    seq<seq<int>> graph_seq;
    seq<seq<int>> path_seq;

    context_everywhere Perm(graph_seq, write);
    context_everywhere Perm(path_seq, write);
    context_everywhere \matrix(G, V, V);
    context_everywhere 0 <= s && s < V && 0 <= t && t < V;
    context_everywhere (\forall* int i1 ; 0 <= i1 && i1 < V ;
                 (\forall* int j1 ; 0 <= j1 && j1 < V ;
                   Perm(G[i1][j1], write)));
    int max_flow(int[V][V] G, int s, int t, int V) {
        int[][] Gf = new int[V][V];
        copy(G, Gf, V);

        int[] p = new int[V];

        initializeWithZeros(p, V);

        return executeEdmondKarp(Gf, s, t, p, V);
    }

    context_everywhere \matrix(Gf, V, V);
    context_everywhere \array(p, V);
    context_everywhere 0 <= s && s < V && 0 <= t && t < V;
    context_everywhere (\forall* int i1 ; 0 <= i1 && i1 < V; 
                        (\forall* int j1 ; 0 <= j1 && j1 < V; 
                            Perm(Gf[i1][j1], write)));
    context_everywhere (\forall* int i1 ; 0 <= i1 && i1 < V; Perm(p[i1], write));
    context_everywhere valid_graph_vertices(p, V);
    int executeEdmondKarp(int[][] Gf, int s, int t, int[] p, int V){
        int maxFlow = 0;
        int u = 0;

        
        while (hasAugmentingPath(Gf, s, t, p, V)) 
        {
            int bottleneckPathFlow = 999999999;

            loop_invariant 0 <= v && v < V;
            for (int v = t; v != s; v = p[v]) 
            {
                u = p[v];
                bottleneckPathFlow = (bottleneckPathFlow <= Gf[u][v]) ? bottleneckPathFlow : Gf[u][v];
            }

            loop_invariant 0 <= v && v < V;
            for (int v = t; v != s; v = p[v]) {
                u = p[v];
                Gf[u][v] = Gf[u][v] - bottleneckPathFlow;
                Gf[v][u] = Gf[v][u] + bottleneckPathFlow;
            }

            maxFlow = maxFlow + bottleneckPathFlow;
        }
        return maxFlow;
    }

    context_everywhere \matrix(Gf, V, V);
    context_everywhere \array(p, V);
    context_everywhere 0 <= s && s < V && 0 <= t && t < V;
    context_everywhere (\forall* int i1 ; 0 <= i1 && i1 < V; 
                        (\forall* int j1 ; 0 <= j1 && j1 < V; 
                            Perm(Gf[i1][j1], write)));
    context_everywhere (\forall* int i1 ; 0 <= i1 && i1 < V; Perm(p[i1], write));
    context_everywhere valid_graph_vertices(p, V);
    boolean hasAugmentingPath(int[][] Gf, int s, int t, int[] p, int V) {
        boolean[] visited = new boolean[V];
        initializeVisited(visited, s, V);

        seq<int> queue = seq<int> { s };

        loop_invariant 0 <= s && s < V;
        loop_invariant valid_graph_vertices(queue, V);
        loop_invariant (\forall* int i1 ; 0 <= i1 && i1 < V; Perm(visited[i1], write));
        while (!queue.isEmpty) {
            int u = queue.head;
            queue.removeAt(0);
            int k = 0;

            loop_invariant visited.length == V;
            loop_invariant 0 <= u && u < V && 0 <= v && v <= V && 0 <= k && k < V;
            loop_invariant valid_graph_vertices(queue, V);
            loop_invariant (\forall* int i1 ; 0 <= i1 && i1 < V; Perm(visited[i1], write));
            for (int v = 0; v < V; v++) {   
                k = v;
                if (!visited[v] && Gf[u][k] > 0) {
                    queue = queue + seq<int> { k };
                    p[v] = u;
                    visited[v] = true;
                }
            }
        }

        return visited[t];
    }

    context_everywhere \array(p, V);
    context (\forall* int k; 0 <= k && k < V ; Perm(p[k], write));
    ensures valid_graph_vertices(p, V);
    ensures (\forall* int k; 0 <= k && k < V ; p[k] == 0);
    void initializeWithZeros(int[V] p, int V){
        par(int i=0..V)
            context  Perm(p[i],write);
            ensures  p[i] == 0;
        {
            p[i] = 0;
        }
    }

    context_everywhere \matrix(source, V, V);
    context  (\forall* int i1; 0 <= i1 && i1 < V;
                 (\forall* int j1; 0 <= j1 && j1 < V;
                   Perm(source[i1][j1],write)));
    context_everywhere \matrix(target, V, V);
    context  (\forall* int i1; 0 <= i1 && i1 < V;
                 (\forall* int j1 ; 0 <= j1 && j1 < V;
                   Perm(target[i1][j1],write)));
    ensures  (\forall* int i1; 0 <= i1 && i1 < V;
                 (\forall* int j1 ; 0 <= j1 && j1 < V;
                   target[i1][j1] == source[i1][j1]));
    void copy(int[][] source, int[][] target, int V) {
        par(int i=0..V,int j=0..V)
            context  Perm(target[i][j],write);
            context  Perm(source[i][j],write);
            ensures  target[i][j] == source[i][j];
        {
            target[i][j] = source[i][j];
        }
    }


    context_everywhere \array(visited, V);
    context_everywhere 0 <= s && s < V;
    context (\forall* int k; 0 <= k && k < V; Perm(visited[k], write));
    ensures (\forall* int k; 0 <= k && k < V && k != s; visited[k] ==  false);
    ensures visited[s] == true;
    void initializeVisited(boolean[] visited, int s, int  V){
        par(int i=0..V)
            context  Perm(visited[i],write);
            ensures  visited[i] == false;
        {
            visited[i] = false;
        }
        visited[s] = true;
    }
}