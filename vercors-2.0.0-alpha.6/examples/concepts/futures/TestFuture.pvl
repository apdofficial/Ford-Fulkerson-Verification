// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: case TestFuture
//:: tool silicon
//:: option --check-history

model Model {
  int x;
  
  modifies x;
  ensures x == \old(x)+1;
  action step();
}

requires Perm(f.x, 1);
requires t == f.x+1;
ensures HPerm(f.x, 1) ** f.state(1, f.step()) ** f.abstractState(f.x == t);
void start(Model f, int t) {
  f.create(f.step());
}

requires HPerm(f.x, 1) ** f.state(1, f.step());
ensures  HPerm(f.x, 1) ** f.state(1, empty);
void work(Model f){
  action(f, 1, empty, f.step()) {
    f.x = f.x + 1;
  }
}

requires HPerm(f.x, 1) ** f.state(1, empty) ** f.abstractState(f.x == t);
ensures Perm(f.x, 1) ** f.x == t;
void stop(Model f,int t){
  f.destroy();
}

void main() {
  Model f=new Model();
  f.x=1;
  f.create(f.step());
  assert f.abstractState(f.x == 2);
  action(f, 1, empty,f.step()) {
    f.x = f.x + 1;
  }
  f.destroy();
  assert f.x==2;
  refute false;
}

void main2() {
  Model f = new Model();
  f.x = 1;
  start(f, 2);
  work(f);
  stop(f, 2);
  assert f.x == 2;
  refute false;
}