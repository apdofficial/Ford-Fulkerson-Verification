// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: case //:: tools silicon
//:: verdict Pass

/////////////////////////////////
// Max sort using an auxiliary //
//  sequence for the result    //
/////////////////////////////////
ensures |\result| == |input|;
ensures sorted(\result);
seq<int> sort(seq<int> input) {
    seq<int> unsorted = input;
    seq<int> result = [t:int];

    loop_invariant |input| == |result| + |unsorted|;
    loop_invariant (\forall int l; 0 <= l && l < |result|; result[l] in input);
    loop_invariant (\forall int l; 0 <= l && l < |unsorted|; unsorted[l] in input);
    loop_invariant !unsorted.isEmpty ==> (\forall int l; 0 <= l && l < |result|; result[l] >= unsorted[max(unsorted)]);
    loop_invariant sorted(result);
    while (!unsorted.isEmpty) {
        int maxOfSeq = max(unsorted);
        result = unsorted[maxOfSeq] :: result;
        unsorted = unsorted.removeAt(maxOfSeq);
    }
    return result;
}

/////////////////////////////////
// In-place max sort algorithm //
/////////////////////////////////
ensures |\result| == |input|;
ensures sorted(\result);
seq<int> sortInPlace(seq<int> input) {
    seq<int> res = input;

    int right = |res|;

    loop_invariant |input| == |res|;
    loop_invariant 0 <= right && right <= |res|;

    loop_invariant (right < |res|) ==> (\forall int m; 0 <= m && m < right; res[right] >= res[m]);
    loop_invariant (right < |res|) ==> (\forall int m; right < m && m < |res|; res[right] <= res[m]);
    loop_invariant (right < |res|) ==> sorted(res[right..]);
    while (right > 0) {
        int maxOfSeq = max(res[..right]);
        right = right - 1;
        res = swap(res, maxOfSeq, right);

    }
    return res;
}



//////////////////////
// Helper Functions //
//////////////////////
requires 0 <= i && i < |xs|;
requires 0 <= j && j < |xs|;
ensures |xs| == |\result|;
ensures (\forall int k; 0 <= k && k < |xs| && k != i && k != j; \result[k] == xs[k]);
ensures \result[i] ==  xs[j];
ensures \result[j] ==  xs[i];
seq<int> swap(seq<int> xs, int i, int j) {
    int tmp = xs[i];
    seq<int> res = Set(xs, i, xs[j]);
    res = Set(res, j, tmp);
    return res;
}

requires 0 <= n && n < |xs|;
ensures |\result| == |xs|;
ensures (\forall int g; 0 <= g && g < n; \result[g] == xs[g]);
ensures (\forall int g; n < g && g < |xs|; \result[g] == xs[g]);
ensures \result[n] == val;
pure seq<int> Set(seq<int> xs, int n, int val) =
    n > 0 ?
    xs.head :: Set(xs.tail, n-1, val) :
    val :: xs.tail;

pure boolean sorted(seq<int> xs) = (\forall int i ; 0 <= i && i < |xs|-1; xs[i] <= xs[i+1]);

requires |xs| > 0;
ensures 0 <= \result && \result < |xs|;
ensures (\forall int i; 0 <= i && i < |xs|; xs[i] <= xs[\result]);
pure int max(seq<int> xs) = maxhelper(xs, 0);

requires |xs| > 0;
requires 0 <= j && j < |xs|;
ensures 0 <= \result && \result < |xs|;
ensures \result >= j;
ensures (\forall int i; j <= i && i < |xs|; xs[i] <= xs[\result]);
pure int maxhelper(seq<int> xs, int j) =
    j == |xs|-1 ?
        j:
        (xs[j] > xs[maxhelper(xs, j+1)] ?
            j:
            maxhelper(xs, j+1)
        );