// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases demo3d
//:: tools silicon
//:: options --check-history
//:: verdict Pass

pure int seqSum(seq<int> xs) = 0 < |xs| ? xs.head + seqSum(xs.tail) : 0;

model Sum {
	int sum;

	modifies sum;
	ensures sum == \old(sum) + v;
	action incr(int v);

	process done(int v) = empty;

	modifies sum;
	requires 0 < |xs|;
	ensures sum == seqSum(xs);
	process P(seq<int> xs) = 0 < |xs| ? incr(xs.head) * done(xs.head) || P(xs.tail) : empty;
}

class Program {
	context_everywhere 0 < |xs|;
	requires m.state(1, m.P(xs));
	ensures (\forall* int i; 0 <= i && i < |xs|; m.state(1\|xs|, m.incr({:xs[i]:}) * m.done(xs[i])));
	void lemma_P_split_all(Sum m, seq<int> xs);

	context_everywhere 0 < |xs|;
	requires (\forall* int i; 0 <= i && i < |xs|; m.state(1\|xs|, m.done({:xs[i]:})));
	ensures m.state(1, empty);
	void lemma_done_merge_all(Sum m, seq<int> xs);

	given seq<int> xs;
	context_everywhere A != null && A.length == |xs| && 0 < A.length;
	context (\forall* int i; 0 <= i && i < A.length; Perm(A[i], 1\2));
	context (\forall int i; 0 <= i && i < A.length; A[i] == xs[i]);
	ensures \result == seqSum(xs);
	int parsum(int[] A) {
		Sum m = new Sum();
		m.create(m.P(xs));
		lemma_P_split_all(m, xs);
		invariant inv(HPerm(m.sum, 1)) //;
		{
			par (int tid = 0 .. A.length)
				context Perm({:A[tid]:}, 1\4);
				context {:A[tid]:} == {:xs[tid]:};
				requires m.state(1\|xs|, m.incr({:A[tid]:}) * m.done(A[tid]));
				ensures m.state(1\|xs|, m.done({:A[tid]:}));
			{
				atomic(inv) {
					action(m, 1\|xs|, m.done(A[tid]), m.incr(A[tid])) {
						m.sum = m.sum + A[tid];
					}
				}
			}
		}

		lemma_done_merge_all(m, xs);
		m.destroy();

		return m.sum;
	}
}
